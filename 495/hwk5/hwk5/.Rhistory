z<-Z+1
} else{
z<-Z-1
}
}
z<-5
while(z>=3 && z<=10){
print(z)
coin<-rbinom(1,1,0.5)
if (coin==1){
z<-Z+1
} else{
z<-Z-1
}
}
z <- 5 while(z>=3 && z<=10){
print(z)
coin<-rbinom(1,1,0.5)
if (coin==1){
z<-Z+1
} else{
z<-Z-1
}
}
z <- 5
while(z>=3 && z<=10){
print(z)
coin<-rbinom(1,1,0.5)
if (coin==1){
z<-Z+1
} else{
z<-Z-1
}
}
z <- 5
while(z>=3 && z<=10){
print(z)
coin<-rbinom(1,1,0.5)
if (coin==1){
z<-Z+1
} else{
z<-Z-1
}
}
z <- 5
while(z>=3 && z<=10){
print(z)
coin<-rbinom(1,1,0.5)
if (coin==1){
z<-Z+1
} else{
z<-Z-1
}
}
z <- 5
while(z>=3 && z<=10){
print(z)
coin<-rbinom(1,1,0.5)
if (coin==1){
z<-z+1
} else{
z<-z-1
}
}
df<-data.frame(social=c(social.opt,social.btw),socialR=c(socialr.opt,socialr.btw),task=c(task.opt,task.btw),taskr=c(taskr.opt,taskr.btw))
socialr.opt<-assortativity.nominal(m182.social.rand,types=membership(m182.opt))
N<-100
x<-rnorm(N)+1;y<-rnorm(N)+1;dat<-data.frame(x,y)
x<-rnorm(N)+5;y<-rnorm(N)+1;dat<-data.frame(dat,data.frame(x,y))
x<-rnorm(N)+1;y<-rnorm(N)+5;dat<-data.frame(dat,data.frame(x,y))
dat
ob<-kmeans(x, 3, iter.max = 10, nstart = 1,algorithm="Hartigan-Wong", trace=FALSE)
fitted(ob, method = "centers" )
ob
cont3 <- read.graph("3continent_Asia_Oceania_Africa.gml",format="gml")
library(sand)
cont3 <- read.graph("3continent_Asia_Oceania_Africa.gml",format="gml")
cont3 <- read.graph("3continent_Asia_Oceania_Africa.gml",format="gml")
cont3 <- read.graph("3continent_Asia_Oceania_Africa.gml",format="gml")
citiesToCities.net.opt<-optimal.community(citiesToCities.net)
citiesToCities.net.assort<-assortativity.nominal(citiesToCities.net,types=membership(citiesToCities.net.opt))
library(sand)
library(corrplot)
library(ngram)
# Loading the data
# Set the path correctly
setwd("C:/Users/TG/Documents/495/globalflightsnetwork/FinalProject")
# Load the edges
project.citiesToCities <- read.csv("C2C-E1.csv", head=TRUE, sep=",")
project.citiesToCitiesPass <- read.csv("C2CP-E1.csv", head=TRUE, sep=",")
# Load the attributes
project.citiesToCitiesVertex <- read.csv("C2C-V2.csv", head=TRUE, sep=",")
project.citiesToCitiesPassVertex <- read.csv("C2CP-V1.csv", head=TRUE, sep=",")
#Cities to cities network(Routes and distance)
citiesToCities.edge <- data.frame(project.citiesToCities$departure.city,
project.citiesToCities$arrival.city,
project.citiesToCities$number.of.routes,
project.citiesToCities$distance)
citiesToCities.net <- graph.data.frame(citiesToCities.edge, directed=TRUE, vertices=project.citiesToCitiesVertex)
assortativity.nominal (citiesToCities.net, types=project.citiesToCitiesVertex$Continent, directed = TRUE)
citiesToCities.net.opt<-optimal.community(citiesToCities.net)
citiesToCities.net.assort<-assortativity.nominal(citiesToCities.net,types=membership(citiesToCities.net.opt))
citiesToCities.net.btw<-edge.betweenness.community(citiesToCities.net)
citiesToCities.net.assort<-assortativity.nominal(citiesToCities.net,types=membership(citiesToCities.net.btw))
citiesToCities.net.assort
citiesToCities.net.egn<-leading.eigenvector.community(citiesToCities.net)
citiesToCities.net.assort<-assortativity.nominal(citiesToCities.net,types=membership(citiesToCities.net.egn))
citiesToCities.network <-asNetwork(citiesToCities.net)
library(lattice)
library(latticeExtra)
library(ergm)
library(intergraph)
citiesToCities.network <-asNetwork(citiesToCities.net)
citiesToCities.ergm<-ergm(citiesToCities.network ~ edges)
summary(citiesToCities.network)
summary(citiesToCities.ergm)
citiesToCities.ergm<-ergm(citiesToCities.network ~ log(edges))
citiesToCities.ergm<-ergm(citiesToCities.network ~ edges)
summary(citiesToCities.ergm)
data(flo)
View(flo)
citiesToCities.network
flo.gr.m.net <-asNetwork(flo.gr.m)
source("hwk5-utils.R")
loadflo()
setwd("C:/Users/TG/Documents/495/hwk5/hwk5")
source("hwk5-utils.R")
loadflo()
flo.gr.m.net <-asNetwork(flo.gr.m)
flo.gr.m.m11
flo.gr.m.net
# Set the path correctly
setwd("C:/Users/TG/Documents/495/globalflightsnetwork/FinalProject")
citiesToCities.ergm.dist<-ergm(citiesToCities.network ~ edges+edgecov("distanc"))
citiesToCities.network
citiesToCities.ergm<-ergm(citiesToCities.network ~ edges)
summary(citiesToCities.ergm)
citiesToCities.ergm<-ergm(citiesToCities.network ~ edges)
citiesToCities.ergm
summary(citiesToCities.ergm)
citiesToCities.ergm.dist<-ergm(citiesToCities.network ~ edges+edgecov("distance"))
citiesToCities.network
citiesToCities.net
citiesToCities.network
E()
E(citiesToCities.network)
citiesToCities.network
citiesToCities.net
get.edge.attribute(citiesToCities.network)
get.edge.attributes(citiesToCities.network)
list.attributes(citiesToCities.network)
library(network)
list.attributes(citiesToCities.network)
list.network.attributes(citiesToCities.network)
citiesToCities.network
#Calculate centrality measures
#average.shortest.path
average.path.length(citiesToCities.net, directed=TRUE, unconnected=TRUE)
#degree centrality
DC <- degree(citiesToCities.net, normalized=TRUE)
#weighted degree centrality
SC <- graph.strength(citiesToCities.net)
SC1 <- SC/max(SC)
#closeness centrality
CC <- closeness(citiesToCities.net, normalized=TRUE, weights=NULL)
#betweenness centrality
BC <- betweenness(citiesToCities.net, normalized=TRUE, weights=NULL)
#eigenvector centrality
EC <- evcent(citiesToCities.net, weights=V(citiesToCities.net)$project.citiesToCities.number.of.routes)$vector
#PageRank
PR <- page.rank(citiesToCities.net, weights=V(citiesToCities.net)$project.citiesToCities.number.of.routes)$vector
project.citiesToCitiesVertex1 <- data.frame(project.citiesToCitiesVertex,
DC,
SC1,
CC,
BC,
EC,
PR)
citiesToCities.net1 <- graph.data.frame(citiesToCities.edge, directed=TRUE, vertices=project.citiesToCitiesVertex1)
citiesToCities.net1
citiesToCities.network <-asNetwork(citiesToCities.net)
citiesToCities.ergm<-ergm(citiesToCities.network ~ edges)
summary(citiesToCities.ergm)
citiesToCities.net1
citiesToCities.network1 <-asNetwork(citiesToCities.net1)
citiesToCities.network1
citiesToCities.ergm<-ergm(citiesToCities.network ~ edges)
citiesToCities.ergm1<-ergm(citiesToCities.network ~ edges)
summary(citiesToCities.ergm)
citiesToCities.ergm1<-ergm(citiesToCities.network ~ edges+nodecov("BC"))
citiesToCities.ergm1<-ergm(citiesToCities.network ~ edges+nodecov("DC"))
E(citiesToCities.net1)$DC
citiesToCities.net1
SC
DC
citiesToCities.net1
project.citiesToCitiesVertex1 <- data.frame(project.citiesToCitiesVertex,
DC,
SC,
CC,
BC,
EC,
PR)
citiesToCities.net1 <- graph.data.frame(citiesToCities.edge, directed=TRUE, vertices=project.citiesToCitiesVertex1)
citiesToCities.network1 <-asNetwork(citiesToCities.net1)
citiesToCities.network1
citiesToCities.net1
citiesToCities.ergm1<-ergm(citiesToCities.network ~ edges+nodecov("SC"))
flo.gr.m.net1
citiesToCities.ergm1<-ergm(citiesToCities.network ~ edges+nodecov("SC"))
E(citiesToCities.net1)$SC
SC
citiesToCities.ergm1<-ergm(citiesToCities.network ~ edges+nodecov("SC"))
citiesToCities.network1 <-asNetwork(citiesToCities.net1)
citiesToCities.ergm1<-ergm(citiesToCities.network ~ edges+nodecov("SC"))
SC
E(citiesToCities.net1)$SC
citiesToCities.net1
citiesToCities.ergm1<-ergm(citiesToCities.network ~ edges+nodecov("distance"))
SC[2]
E(citiesToCities.net1)$SC[2][1]
E(citiesToCities.net1)$SC[2:1]
SC[2:1]
SC[2:10]
SC[2:10][0]
SC[2:10][0,]
SC[2:10][1,]
SC[2:10][,1]
SC[2:10][1]
SC[2][1]
SC[2][10]
SC
SC[[1]]
project.citiesToCitiesVertex
project.citiesToCitiesVertex1 <- data.frame(project.citiesToCitiesVertex,
DC[[1]],
SC[[1]],
CC[[1]],
BC[[1]],
EC[[1]],
PR[[1]])
citiesToCities.net1 <- graph.data.frame(citiesToCities.edge, directed=TRUE, vertices=project.citiesToCitiesVertex1)
citiesToCities.net1
citiesToCities.network1 <-asNetwork(citiesToCities.net1)
citiesToCities.network1
citiesToCities.ergm1<-ergm(citiesToCities.network ~ edges+nodecov("SC..1.."))
DC[[1]]
DC[[2]]
SC[[,1]]
SC[[1:1083]]
SC[[1][1083]]
SC[[1]:[1083]]
DC[[1]]
DC[[1083]]
DC
DC[[1083]]
DC[[1:1083]]
DC[1:1083]
DC[[]1:1083]
DC
SC[[1]]
DC[[1:1083]]
DC
DC[1]
DC[[1:1083][1]]
DC[[1:1083][1]]
dc111<-data.frame(DC[1])
dc111
dc111[1,1]
dc111[1]
dc111[1,1]
dc111<-data.frame(DC[1:1083])
dc111
dc111[1]
dc111[1,1]
dc111[2,1]
dc111[2]
dc111[2,1:1083]
dc111[1:1083,1]
dc111[1:1083,1]
DC1<-data.frame(DC[1:1083])
DC1<-data.frame(DC[1:1083])
DC2<-DC1[1:1083,1]
DC2
SC1<-data.frame(SC[1:1083])
SC2<-SC1[1:1083,1]
SC2
CC1<-data.frame(CC[1:1083])
cC2<-CC1[1:1083,1]
cC2
BC1<-data.frame(BC[1:1083])
BC2<-BC1[1:1083,1]
BC2
EC1<-data.frame(EC[1:1083])
EC2<-EC1[1:1083,1]
EC2
PR1<-data.frame(PR[1:1083])
PR2<-PR1[1:1083,1]
PR2
project.citiesToCitiesVertex1 <- data.frame(project.citiesToCitiesVertex,
DC2,
SC2,
CC2,
BC2,
EC2,
PR2)
CC1<-data.frame(CC[1:1083])
cC2<-CC1[1:1083,1]
project.citiesToCitiesVertex1 <- data.frame(project.citiesToCitiesVertex,
DC2,
SC2,
CC2,
BC2,
EC2,
PR2)
CC2<-CC1[1:1083,1]
project.citiesToCitiesVertex1 <- data.frame(project.citiesToCitiesVertex,
DC2,
SC2,
CC2,
BC2,
EC2,
PR2)
citiesToCities.net1 <- graph.data.frame(citiesToCities.edge, directed=TRUE, vertices=project.citiesToCitiesVertex1)
citiesToCities.net1
citiesToCities.network1 <-asNetwork(citiesToCities.net1)
citiesToCities.ergm1<-ergm(citiesToCities.network ~ edges+nodecov("SC2"))
SC2
E(citiesToCities.net1)$SC2[1]
type[SC2]
typeof[SC2]
typeof[SC2[0]]
SC2[1]
typeof[SC2[1]]
E(citiesToCities.net1)$typeof[SC2[[1]]
typeof[SC2[[1]]
typeof[SC2[[1]]
;
SC2
SC1
SC[1]
SC[1][1]
sc[1, 1]
SC1[1,1]
sc1[1, 2]
SC1[1, 2]
SC1[1,]
SC[2, 1]
SC1[2,1]
SC1[,1]
SC1[1:1083,1]
class[SC1]
class(SC1)
class(SC2)
typeof(SC2)
as.numeric(SC2)
typeof(as.numeric(SC2))
?numeric
is.numeric(SC2)
is.double(SC2)
citiesToCities.ergm1<-ergm(citiesToCities.network ~ edges+nodecov("SC2"))
citiesToCities.net1 <- graph.data.frame(citiesToCities.edge, directed=TRUE, vertices=project.citiesToCitiesVertex1)
citiesToCities.net1 <- graph.data.frame(citiesToCities.edge, directed=TRUE, vertices=project.citiesToCitiesVertex1)
citiesToCities.network1 <-asNetwork(citiesToCities.net1)
citiesToCities.ergm1<-ergm(citiesToCities.network ~ edges+nodecov("SC2"))
?nodecov
SC2
nodecov(SC2)
citiesToCities.ergm1<-ergm(citiesToCities.network ~ edges+nodecov(SC2))
citiesToCities.network1
citiesToCities.ergm1<-ergm(citiesToCities.network ~ edges+nodecov("DC2"))
V(citiesToCities.network)
citiesToCities.network$SC2
citiesToCities.network$SC2
citiesToCities.ergm1<-ergm(citiesToCities.network ~ edges+nodecov("DC2"))
V(citiesToCities.network)$SC2
citiesToCities.ergm1<-ergm(citiesToCities.network ~ edges+nodecov("DC2"))
citiesToCities.network1 <-asNetwork(citiesToCities.net1)
citiesToCities.net1
citiesToCities.network1
citiesToCities.net.btw<-edge.betweenness.community(citiesToCities.net)
citiesToCities.net.btw
clear
citiesToCities.net.btw
citiesToCities.net.btw[1]
citiesToCities.net.btw[0]
citiesToCities.net.btw[2]
citiesToCities.net.btw[1:1000,2]
citiesToCities.net.btw[2][1:1000]
citiesToCities.net.btw[2][1:5]
citiesToCities.net.btw
citiesToCities.net.btw$membership
citiesToCities.net.wlktrp<-  walktrap.community(citiesToCities.net)
citiesToCities.net.wlktrp
citiesToCities.net.wlktrp$membership
citiesToCities.net
citiesToCities.net.wlktrp
citiesToCities.net.wlktrp
citiesToCities.net.btw
citiesToCities.net.wlktrp<-  walktrap.community(citiesToCities.net,steps=6)
citiesToCities.net.wlktrp
citiesToCities.net.wlktrp<-  walktrap.community(citiesToCities.net,steps=4)
citiesToCities.net.wlktrp
citiesToCities.net.wlktrp<-  walktrap.community(citiesToCities.net,steps=10)
citiesToCities.net.wlktrp
citiesToCities.net.wlktrp<-  walktrap.community(citiesToCities.net,steps=12)
citiesToCities.net.wlktrp
citiesToCities.net.wlktrp<-  walktrap.community(citiesToCities.net,steps=8)
citiesToCities.net.wlktrp
citiesToCities.net
E(citiesToCities.net)$distance
E(citiesToCities.net)$project.citiesToCities.distance
citiesToCities.net.wlktrp<-  walktrap.community(citiesToCities.net,steps=6, weight=E(citiesToCities.net)$project.citiesToCities.distance)
citiesToCities.net.wlktrp
citiesToCities.net.wlktrp<-  walktrap.community(citiesToCities.net, weight=E(citiesToCities.net)$project.citiesToCities.distance)
citiesToCities.net.wlktrp
citiesToCities.net
citiesToCities.net.wlktrp<-  walktrap.community(citiesToCities.net, weight=E(citiesToCities.net)$project.citiesToCities.number.of.routes)
citiesToCities.net.wlktrp
citiesToCities.net.wlktrp<-  walktrap.community(citiesToCities.net,steps=6 weight=E(citiesToCities.net)$project.citiesToCities.number.of.routes)
citiesToCities.net.wlktrp<-  walktrap.community(citiesToCities.net,steps=6, weight=E(citiesToCities.net)$project.citiesToCities.number.of.routes)
citiesToCities.net.wlktrp
citiesToCities.net.wlkassort<-assortativity.nominal(citiesToCities.net,types=membership(citiesToCities.net.wlktrp))
citiesToCities.net.wlkassort
citiesToCities.ergm1<-ergm(citiesToCities.network ~ edges+nodecov("DC2"))
citiesToCities.ergm1<-ergm(citiesToCities.network ~ edges+nodecov("DC2"))
BC2
DC2
project.citiesToCitiesVertex1 <- data.frame(project.citiesToCitiesVertex,
DC2,
SC2,
CC2,
BC2,
EC2,
PR2)
citiesToCities.net1 <- graph.data.frame(citiesToCities.edge, directed=TRUE, vertices=project.citiesToCitiesVertex1)
citiesToCities.network1 <-asNetwork(citiesToCities.net1)
citiesToCities.ergm1<-ergm(citiesToCities.network ~ edges+nodecov("DC2"))
DC2
citiesToCities.ergm1<-ergm(citiesToCities.network ~ edges+nodecov(DC2))
isNumeric(DC2)
is.Numeric(DC2)
is.numeric(DC2)
citiesToCities.network1
nodecov("DC2")
citiesToCities.ergm1<-ergm(citiesToCities.network ~ edges+nodecov("DC2"))
citiesToCities.ergm1<-ergm(citiesToCities.network ~ edges + nodecov("DC2"))
library(network)
library(lattice)
library(latticeExtra)
library(ergm)
library(intergraph)
library(sand)
# Set the working directory. Adapt this for your local situation
setwd("C:/Users/TG/Documents/495/hwk5/hwk5")
source("hwk5-utils.R")
loadflo()
flo.gr.m.net <-asNetwork(flo.gr.m)
flo.gr.m.m11<-ergm(flo.gr.m.net ~ edges)
summary(flo.gr.m.m11)
flo.gr.m.m1<-ergm(flo.gr.m.net ~ edges+nodecov("wealth"))
flo.gr.m.m11
flo.gr.m.net
flo.gr.m
E(flo.gr.m)$wealth
E(flo.gr.m)$wealth
wealth
V(flo.gr.m)$wealth
V(citiesToCities.net1)$DC2
V(citiesToCities.net1)$SC2
citiesToCities.ergm1<-ergm(citiesToCities.network ~ edges + nodecov("SC2"))
SC2<-as.integer(SC2)
SC2
project.citiesToCitiesVertex1 <- data.frame(project.citiesToCitiesVertex,
DC2,
SC2,
CC2,
BC2,
EC2,
PR2)
citiesToCities.net1 <- graph.data.frame(citiesToCities.edge, directed=TRUE, vertices=project.citiesToCitiesVertex1)
citiesToCities.network1 <-asNetwork(citiesToCities.net1)
citiesToCities.ergm1<-ergm(citiesToCities.network ~ edges + nodecov("SC2"))
V(citiesToCities.net1)$SC2
citiesToCities.ergm1<-ergm(citiesToCities.network ~ edges + nodeicov("SC2"))
citiesToCities.ergm1<-ergm(citiesToCities.network ~ edges + nodeicov(SC2))
citiesToCities.ergm1<-ergm(citiesToCities.network ~ edges + nodeicov(V(citiesToCities.net1)$SC2))
citiesToCities.ergm1<-ergm(citiesToCities.network ~ edges + nodecov(V(citiesToCities.net1)$SC2))
citiesToCities.net
firsbool
x=c("NorthAmerica","Africa", "Oceania","Europe", "Asia" ,"SouthAmerica")
length(x)
gramcontinents<-""
gramcontinentsarr<-"" #paste("contcomb",1:length(x),sep="_")
for (i in 1:length(x)){
grmsplit<-strsplit(x[i]," ")[[1]]
firsbool<-(project.citiesToCitiesVertex$Continent==grmsplit[1])
#secnbool<-(project.citiesToCitiesVertex$Continent==grmsplit[2])
#thirdbool<-(project.citiesToCitiesVertex$Continent==grmsplit[3])
#fourthbool<-(project.citiesToCitiesVertex$Continent==grmsplit[4])
#fifthbool<-(project.citiesToCitiesVertex$Continent==grmsplit[5])
#finalbool
#for (i in 1:length(firsbool)){
#finalbool[i]<-firsbool[i]||secnbool[i]||thirdbool[i]||fourthbool[i] ||fifthbool[i]
#}
gramcontinents<- induced.subgraph(citiesToCities.net, which(firsbool))
gc<-paste(grmsplit[1],sep="_")
name<-paste("C:/Users/TG/Documents/495/globalflightsnetwork/FinalProject/eachcontinent",gc,sep="_")
namef<-paste(name,".gml")
write.graph(gramcontinents, namef, format="gml")
#plot(gramcontinents)
}
