plot(dine, vertex.label=V(dine)$id, edge.arrow.size=0.6,
layout=mcoord, vertex.size=dine.central,vertex.color=dine.central+1,)
plot(dine, vertex.label=V(dine)$id, edge.arrow.size=0.6,
layout=mcoord, vertex.size=dine.central*2+5,vertex.color=dine.central+1,)
plot(dine, vertex.label=V(dine)$id, edge.arrow.size=0.6,
layout=mcoord, vertex.size=dine.central*2+5)
plot(dine, vertex.label=V(dine)$id, edge.arrow.size=0.6,
layout=mcoord, vertex.size=dine.bonpow2*2+5)
plot(dine, vertex.label=V(dine)$id, edge.arrow.size=0.6,
layout=mcoord, vertex.size=dine.central*2+5)
plot(dine,  edge.arrow.size=0.6,
layout=mcoord, vertex.size=dine.central*2+5)
par(mfrow=c(2,2))
plot(dine, vertex.label=V(dine)$id, edge.arrow.size=0.6,
layout=mcoord, vertex.size=dine.central*2+5)
plot(dine, vertex.label=V(dine)$id, edge.arrow.size=0.6,
layout=mcoord, vertex.size=dine.bonpow2*2+5)
par(mfrow=c(1,1))
# R setup
library("sand")
library("corrplot")
library("network")
library("sna")
# 2 Data file location
setwd("C:/Users/TG/OneDrive/Documents/CSC 495/hwk3/hwk3")
dine<-read.graph('dining.net',format='pajek')
dine
list.vertex.attributes(dine)
list.edge.attributes(dine)
dine.size<-degree(dine,mode='in')* 2 + 5
dine.edwt<-E(dine)$weight
dine.wt <- 4 / (E(dine)$weight*E(dine)$weight)
xc <- V(dine)$"x"*2.0
yc <- V(dine)$"y"*2.0
# Put X and y coordinates together into a coordinate matrix.
mcoord <- cbind(xc, yc)
dine.un <- as.undirected(dine, mode="collapse",edge.attr.comb="ignore")
dine.com <- walktrap.community(dine.un)
dine.com
# Get the membership vector
dine.vec <- dine.com$membership
# Use it to color the vertices
plot(dine, vertex.label=V(dine)$id, edge.arrow.size=0.6,
layout=mcoord, vertex.size=dine.size,vertex.color=dine.vec+1,
edge.width=dine.wt)
dine.central <- degree(dine,normalized=TRUE)
dine.central
dine.eigen<-evcent(dine)$vector
dine.eigens<-dine.eigen$values
dine.eigens
dine.adj <- get.adjacency(dine, sparse=FALSE)
dine.closeness<-closeness(dine.adj)
dine.closeness
dine.bwn<-betweenness(dine.adj)
dine.bwn
dine.prank<-page.rank(dine)
dine.pagerank<-dine.prank$vector
dine.bonpow1<- bonpow(dine.adj,exponent=0.75)
dine.bonpow1
dine.bonpow2<- bonpow(dine.adj,exponent=-1)
dine.bonpow2
dine.centraldf<-cbind(dine.central,dine.eigens,dine.closeness,dine.bwn,dine.pagerank,dine.bonpow1,dine.bonpow2)
dine.centraldf
dine.cor<-cor(dine.centraldf)
corrplot.mixed(dine.cor)
par(mfrow=c(2,2))
plot(dine, vertex.label=V(dine)$id, edge.arrow.size=0.6,
layout=mcoord, vertex.size=dine.central*2+5)
plot(dine, vertex.label=V(dine)$id, edge.arrow.size=0.6,
layout=mcoord, vertex.size=dine.bonpow2*2+5)
par(mfrow=c(1,1))
# R setup
library("sand")
library("corrplot")
library("network")
library("sna")
# 2 Data file location
setwd("C:/Users/TG/OneDrive/Documents/CSC 495/hwk3/hwk3")
dine<-read.graph('dining.net',format='pajek')
dine
list.vertex.attributes(dine)
list.edge.attributes(dine)
dine.size<-degree(dine,mode='in')* 2 + 5
dine.edwt<-E(dine)$weight
dine.wt <- 4 / (E(dine)$weight*E(dine)$weight)
xc <- V(dine)$"x"*2.0
yc <- V(dine)$"y"*2.0
# Put X and y coordinates together into a coordinate matrix.
mcoord <- cbind(xc, yc)
dine.un <- as.undirected(dine, mode="collapse",edge.attr.comb="ignore")
dine.com <- walktrap.community(dine.un)
dine.com
# Get the membership vector
dine.vec <- dine.com$membership
# Use it to color the vertices
plot(dine, vertex.label=V(dine)$id, edge.arrow.size=0.6,
layout=mcoord, vertex.size=dine.size,vertex.color=dine.vec+1,
edge.width=dine.wt)
dine.central <- degree(dine,normalized=TRUE)
dine.central
dine.eigen<-evcent(dine)$vector
dine.eigens<-dine.eigen$values
dine.eigens
dine.adj <- get.adjacency(dine, sparse=FALSE)
dine.closeness<-closeness(dine.adj)
dine.closeness
dine.bwn<-betweenness(dine.adj)
dine.bwn
dine.prank<-page.rank(dine)
dine.pagerank<-dine.prank$vector
dine.bonpow1<- bonpow(dine.adj,exponent=0.75)
dine.bonpow1
dine.bonpow2<- bonpow(dine.adj,exponent=-1)
dine.bonpow2
dine.centraldf<-cbind(dine.central,dine.eigens,dine.closeness,dine.bwn,dine.pagerank,dine.bonpow1,dine.bonpow2)
dine.centraldf
dine.cor<-cor(dine.centraldf)
corrplot.mixed(dine.cor)
par(mfrow=c(2,2))
plot(dine, vertex.label=V(dine)$id, edge.arrow.size=0.6,
layout=mcoord, vertex.size=dine.central*2+5)
plot(dine, vertex.label=V(dine)$id, edge.arrow.size=0.6,
layout=mcoord, vertex.size=dine.bonpow2*2+5)
par(mfrow=c(1,1))
list.vertex.attributes(dine)
dine
list.vertex.attributes(dine)
list.vertex.attributes(V(dine))
dine<-read.graph('dining.net',format='pajek')
dine
list.vertex.attributes(dine)
setwd("C:/Users/TG/OneDrive/Documents/CSC 495/hwk2/hwk2")
# 3 Read data
lesm3 <- read.graph("lesmiserables3.net", format="pajek")
list.vertex.attributes(lesm3)
library("network")
setwd("C:/Users/TG/OneDrive/Documents/CSC 495/hwk3/hwk3")
dine<-read.graph('dining.net',format='pajek')
dine
list.vertex.attributes(dine)
library("sand")
library("corrplot")
#library("network")
library("sna")
# 2 Data file location
setwd("C:/Users/TG/OneDrive/Documents/CSC 495/hwk3/hwk3")
dine<-read.graph('dining.net',format='pajek')
dine
list.vertex.attributes(dine)
list.vertex.attributes(dine[,])
dine
vertex.attributes(dine)
vertex.attributes(dine$id)
list.vertex.attributes(dine)
dine.size<-degree(dine)* 2 + 5
# R setup
library("sand")
library("corrplot")
#library("network")
#library("sna")
# 2 Data file location
setwd("C:/Users/TG/OneDrive/Documents/CSC 495/hwk3/hwk3")
dine<-read.graph('dining.net',format='pajek')
dine
dine.size<-degree(dine)* 2 + 5
# R setup
library("sand")
library("corrplot")
# 2 Data file location
setwd("C:/Users/TG/OneDrive/Documents/CSC 495/hwk3/hwk3")
dine<-read.graph('dining.net',format='pajek')
dine
dine.size<-degree(dine)* 2 + 5
library("sna", lib.loc="~/R/win-library/3.1")
remove.packages("sna", lib="~/R/win-library/3.1")
dine
dine.size<-degree(dine)* 2 + 5
install.packages("sna")
dine<-read.graph('dining.net',format='pajek')
dine
dine<-read.graph('dining.net',format='pajek')
dine
# R setup
library("sand")
library("corrplot")
# 2 Data file location
setwd("C:/Users/TG/OneDrive/Documents/CSC 495/hwk3/hwk3")
dine<-read.graph('dining.net',format='pajek')
dine
dine.size<-degree(dine)* 2 + 5
dine.edwt<-E(dine)$weight
dine.wt <- 4 / (E(dine)$weight*E(dine)$weight)
xc <- V(dine)$"x"*2.0
yc <- V(dine)$"y"*2.0
dine.un <- as.undirected(dine, mode="collapse",edge.attr.comb="ignore")
dine.com <- walktrap.community(dine.un)
dine.com
# Get the membership vector
dine.vec <- dine.com$membership
# Use it to color the vertices
plot(dine, vertex.label=V(dine)$id, edge.arrow.size=0.6,
layout=mcoord, vertex.size=dine.size,vertex.color=dine.vec+1,
edge.width=dine.wt)
dine.central <- degree(dine,normalized=TRUE)
dine.central
plot(dine, vertex.label=V(dine)$id, edge.arrow.size=0.6,
layout=layout.kamada.kawai, vertex.size=dine.size,vertex.color=dine.vec+1,
edge.width=dine.wt)
plot(dine, vertex.label=V(dine)$id, edge.arrow.size=0.6,
layout=layout.kamada.kawai, vertex.size=dine.size,vertex.color=blue,
edge.width=dine.wt)
plot(dine, vertex.label=V(dine)$id, edge.arrow.size=0.6,
layout=layout.kamada.kawai, vertex.size=dine.size,vertex.color="blue",
edge.width=dine.wt)
dine.eigen<-evcent(dine)$vector
dine.eigens<-dine.eigen$values
dine.eigens
dine.adj <- get.adjacency(dine, sparse=FALSE)
dine.closeness<-closeness(dine.adj)
dine.closeness
dine.bwn<-betweenness(dine.adj)
dine.bwn
dine.eigen
dine.adj <- get.adjacency(dine, sparse=FALSE)
dine.closeness<-closeness(dine)
dine.closeness
dine.bwn<-betweenness(dine)
dine.bwn
dine.prank<-page.rank(dine)
dine.pagerank<-dine.prank$vector
dine.bonpow1<- bonpow(dine.adj,exponent=0.75)
dine.bonpow1
dine.bonpow2<- bonpow(dine.adj,exponent=-1)
dine.bonpow2
dine.bonpow1<- bonpow(dine,exponent=0.75)
dine.bonpow1
dine.bonpow2<- bonpow(dine,exponent=-1)
dine.bonpow2
dine.centraldf<-cbind(dine.central,dine.eigen,dine.closeness,dine.bwn,dine.pagerank,dine.bonpow1,dine.bonpow2)
dine.centraldf
dine.cor<-cor(dine.centraldf)
corrplot.mixed(dine.cor)
par(mfrow=c(2,2))
plot(dine, vertex.label=V(dine)$id, edge.arrow.size=0.6,
layout=mcoord, vertex.size=dine.central*2+5)
plot(dine, vertex.label=V(dine)$id, edge.arrow.size=0.6,
layout=mcoord, vertex.size=dine.bonpow2*2+5)
par(mfrow=c(1,1))
par(mfrow=c(2,2))
plot(dine, vertex.label=V(dine)$id, edge.arrow.size=0.6,
layout=layout.kamada.kawai, vertex.size=dine.central*2+5)
plot(dine, vertex.label=V(dine)$id, edge.arrow.size=0.6,
layout=layout.kamada.kawai, vertex.size=dine.bonpow2*2+5)
par(mfrow=c(1,1))
cities <- read.graph("cities.net", format="pajek")
plot(cities)
V(cities)$id
is.bipartite(cities)
cities.city <- bipartite.projection(cities, which="false")
cities.city
plot(cities.city, vertex.label=V(cities.city)$id,
layout=layout.kamada.kawai)
hist(E(cities.city)$weight)
city.strng <- graph.strength(cities.city)
hist(city.strng)
city.strng
hist(E(cities.city)$weight)
E(cities.city)$weight
cities.city
cities.city$id
V(cities.city)$id
hist(city.strng)
city.strng
Order(city.strng)
order(city.strng)
city.strng[order(city.strng)]
remove.singletons <- function (g, val) {
toremove <-delete.vertices(g, which(city.strng<=val));
toremove
}
cities.city1<-remove.singletons(cities.city,1)
cities.city1
V(cities.city1)$id
V(cities.city1)$weight
cities.Other <- bipartite.projection(cities, which="true")
cities.city
cities.other
cities.other
cities.Other <- bipartite.projection(cities, which="true")
cities.Other
V(cities.Other)$id
city.strng
g <- graph.formula(A-B, A-C, B-D, D-A, C-D, A-E)
plot(g)
g.str<-graph.strength(g)
g.str
plot(cities.city)
list.edge.attributes(cities.city)
E(cities.city)$weight
remove.edges <- function (g, val) {
toremove <-delete.vertices(g, which(city.strng<=val));
toremove
}
remove.edges <- function (g, val) {
toremove <-delete.edges(g, which(E(cities.city)$weight<val));
toremove
}
cities.city1<-remove.eges(cities.city,28)
cities.city1<-remove.edges(cities.city,28)
plot(cities.city1)
city.strng <- degree(cities.city1)
city.strng
remove.singletons <- function (g, val) {
toremove <-delete.vertices(g, which(city.strng<val));
toremove
}
cities.city1<-remove.singletons(cities.city1,1)
plot(cities.city1)
g
g <- read.graph("cities.net", format="pajek")
g
E(g)$weight
set.edge.attribute(g,weight,index=E(g),1.0)
set.graph.attribute(g,weight,index=E(g),1)
set.edge.attribute(g,"weight",value=1.0)
E(g)$weight
g1<-set.edge.attribute(g,"weight",value=1.0)
E(g1)$weight
E(cities.city1)$weight
cities.city1<-set.edge.attribute(cities.city1,"weight",value=1.0)
E(cities.city1)$weight
cities.city1.closeness<-closeness(cities.city1)
cities.city1.closeness
cities.city1.closeness<-closeness(cities.city1,normalized=TRUE)
cities.city1.closeness
V(cities.city1)$id
cities.city1<-delete.vertices(cities.city1, which(cities.city1.closeness=1))
V(cities.city1)$id
cities.city1<-delete.vertices(cities.city1, which(cities.city1.closeness=1.0))
cities.city1<-delete.vertices(cities.city1, which(cities.city1.closeness=1.0000000))
cities.city1.closeness
cities.city1.closeness[=1]
which(cities.city1.closeness=1)
cities.city1<-delete.vertices(cities.city1, which(cities.city1.closeness>=1.0000000))
V(cities.city1)$id
plot(cities.city1)
cities.city1<-remove.singletons(cities.city1,1)
plot(cities.city1)
cities.city1<-remove.singletons(cities.city1,1)
cities.city2<-remove.singletons(cities.city1,1)
cities.city1.strng<-graph.strength(cities.city1)
cities.city1<-delete.vertices(cities.city1, which(cities.city1.strng<1))
plot(cities.city1)
cities.city1.strng<-graph.strength(cities.city1)
cities.city1.strng
plot(cities.city1, vertex.size=degree(V(cities.city1)),vertex.label=V(cities.city1)$id, edge.arrow.size=0.2,layout=layout.kamada.kawai)
plot(cities.city1, vertex.size=degree(cities.city1),vertex.label=V(cities.city1)$id, edge.arrow.size=0.2,layout=layout.kamada.kawai)
cities.city1.central <- degree(cities.city1,normalized=TRUE)
cities.city1.central
cities.city1.closeness<-closeness(cities.city1,normalized=TRUE)
cities.city1.closeness
cities.city1<-betweenness(cities.city1,normalized=TRUE)
cities.city1.bwn
cities.city1
cities.city1<-remove.edges(cities.city,28)
plot(cities.city1)
city.strng <- degree(cities.city1)
city.strng
remove.singletons <- function (g, val) {
toremove <-delete.vertices(g, which(city.strng<val));
toremove
}
cities.city1<-remove.singletons(cities.city1,1)
plot(cities.city1)
E(cities.city1)$weight
cities.city1<-set.edge.attribute(cities.city1,"weight",value=1.0)
E(cities.city1)$weight
cities.city1.closeness<-closeness(cities.city1,normalized=TRUE)
which(cities.city1.closeness=1)
V(cities.city1)$id
cities.city1<-delete.vertices(cities.city1, which(cities.city1.closeness>=1.0000000))
V(cities.city1)$id
plot(cities.city1)
cities.city1.strng<-graph.strength(cities.city1)
cities.city1<-delete.vertices(cities.city1, which(cities.city1.strng<1))
plot(cities.city1)
cities.city1.strng<-graph.strength(cities.city1)
cities.city1.strng
plot(cities.city1, vertex.size=degree(cities.city1),vertex.label=V(cities.city1)$id, edge.arrow.size=0.2,layout=layout.kamada.kawai)
cities.city1.central <- degree(cities.city1,normalized=TRUE)
cities.city1.central
cities.city1.closeness<-closeness(cities.city1,normalized=TRUE)
cities.city1.closeness
cities.city1.bwn<-betweenness(cities.city1,normalized=TRUE)
cities.city1.bwn
cities.city1.central[order(-cities.city1.central)]
cities.city1.central[order(-cities.city1.central)]
cities.city1.closeness[order(-cities.city1.closeness)]
cities.city1.bwn[order(-cities.city1.bwn)]
sort.list(cities.city1.bwn)
cities.city1.bwn
sort.list(cities.city1.bwn,decreasing=TRUE)
sort.list(cities.city1.bwn,decreasing=TRUE)[1:8]
sortcentre<-sort.list(cities.city1.central,decreasing=TRUE)[1:8]
sortclose<-sort.list(cities.city1.closeness,decreasing=TRUE)[1:8]
sortbwn<-sort.list(cities.city1.bwn,decreasing=TRUE)[1:8]
sortcentre
sortclose
sortbwn
sortcentredf<-cbind(sortcentre,sortclose,sortbwn)
sortcentredf
View(sortcentredf)
View(sortcentredf)
View(sortcentredf)
View(sortcentredf)
sortcentre<-cities.city1.central(sort.list(cities.city1.central,decreasing=TRUE)[1:8])
cities.city1.central
sortcentre<-cities.city1.central[sort.list(cities.city1.central,decreasing=TRUE)[1:8])]
cities.city1.central(sortcentre)
cities.city1.central[sortcentre]
cities.city1.central
sortcentre
v(cities.city1)$id
V(cities.city1)$id
V(cities.city1[2])$id
cities.city1[2]
cities.list<-V(cities.city1$id)
cities.list<-V(cities.city1)$id
cities.centrallist<-cities.list[sortcentre]
cities.centrallist
sortcentredf<-(cities.city1.central[sortcentre],cities.centrallist)
sortcentredf
sortcentredf<-cbind(cities.city1.central[sortcentre],cities.centrallist)
sortcentredf
cities.centralvalue<- cities.city1.central[sortcentre]
sortcentredf<-cbind(cities.centrallist,cities.centralvalue)
sortcentredf
cities.bwnlist<-cities.list[sortbwn]
cities.bwnvalue<- cities.city1.bwn[sortbwn]
sortbwndf<-cbind(cities.bwnlist,cities.bwnvalue)
sortbwndf
cities.clslist<-cities.list[sortclose]
cities.clsvalue<- cities.city1.bwn[sortclose]
sortclosedf<-cbind(cities.clslist,cities.clsvalue)
sortclosedf
g <- graph.ring(10)
g
V(g)$name <- c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j")
plot(g)
graph.neighborhood(g, 2, 1:3)
V(cities.city1)$id
V(cities.city1)$id
sortcentre
graph.neighborhood(cities.city1,order=sortcentre, nodes=cities.centrallist)
graph.neighborhood(cities.city1,1, 1:3)
graph.neighborhood(cities.city1, nodes=V(cities.city1)$id)
graph.neighborhood(cities.city1, nodes=3)
graph.neighborhood(cities.city1,order=1, nodes=3)
plot(graph.neighborhood(cities.city1,order=1, nodes=3))
plot(graph.neighborhood(cities.city1,order=1, nodes=3,mode="all"))
graph.neighborhood(cities.city1,order=1, nodes=3,mode="all")
V(cities.city1)$degree
frankfurt.neighbors<-graph.neighborhood(cities.city1,1, 3,)[[1]]
plot(frankfurt.neighbors)
plot(frankfurt.neighbors,vertexlabel=V(cities.city1)$id)
plot(frankfurt.neighbors,vertex.label=V(cities.city1)$id)
frankfurt.neighbors<-graph.neighborhood(cities.city1,1, 3,)[[1]]
frankfurt.neighbors<-graph.neighborhood(cities.city1,1, 3,)[[2]]
plot(frankfurt.neighbors)
frankfurt.neighbors<-graph.neighborhood(cities.city1,1, 3,)[[1]]
frankfurt.neighbors
plot(frankfurt.neighbors,vertex.label=V(frankfurt.neighbors)$id)
V(frankfurt.neighbors)$id
par(mfrow=c(2,2))
frankfurt.neighbors<-graph.neighborhood(cities.city1,1, 3)[[1]]
plot(frankfurt.neighbors,vertex.label=V(frankfurt.neighbors)$id)
milan.neighbors<-graph.neighborhood(cities.city1,1, 7)[[1]]
plot(milan.neighbors,vertex.label=V(milan.neighbors)$id)
singapore.neighbors<-graph.neighborhood(cities.city1,1, 10)[[1]]
plot(singapore.neighbors,vertex.label=V(singapore.neighbors)$id)
tokyo.neighbors<-graph.neighborhood(cities.city1,1, 12)[[1]]
plot(tokyo.neighbors,vertex.label=V(tokyo.neighbors)$id)
par(mfrow=c(1,1))
par(mfrow=c(2,2))
plot(dine, vertex.label=V(dine)$id, edge.arrow.size=0.6,
layout=layout.kamada.kawai, vertex.size=dine.central*2+5,main="Degree Centrality")
plot(dine, vertex.label=V(dine)$id, edge.arrow.size=0.6,
layout=layout.kamada.kawai, vertex.size=dine.bonpow2*2+5main="Bonacich Centrality")
par(mfrow=c(1,1))
par(mfrow=c(2,2))
plot(dine, vertex.label=V(dine)$id, edge.arrow.size=0.6,
layout=layout.kamada.kawai, vertex.size=dine.central*2+5,main="Degree Centrality")
plot(dine, vertex.label=V(dine)$id, edge.arrow.size=0.6,
layout=layout.kamada.kawai, vertex.size=dine.bonpow2*2+5,main="Bonacich Centrality")
par(mfrow=c(1,1))
par(mfrow=c(2,2))
plot(dine, vertex.label=V(dine)$id, edge.arrow.size=0.6,
layout=layout.kamada.kawai, vertex.size=dine.central,main="Degree Centrality")
plot(dine, vertex.label=V(dine)$id, edge.arrow.size=0.6,
layout=layout.kamada.kawai, vertex.size=dine.bonpow2,main="Bonacich Centrality")
par(mfrow=c(1,1))
corrplot.mixed(dine.cor)
par(mfrow=c(2,2))
frankfurt.neighbors<-graph.neighborhood(cities.city1,1, 3)[[1]]
plot(frankfurt.neighbors,vertex.label=V(frankfurt.neighbors)$id,main="Frankfurt")
milan.neighbors<-graph.neighborhood(cities.city1,1, 7)[[1]]
plot(milan.neighbors,vertex.label=V(milan.neighbors)$id,main="Milan")
singapore.neighbors<-graph.neighborhood(cities.city1,1, 10)[[1]]
plot(singapore.neighbors,vertex.label=V(singapore.neighbors)$id,main="Singapore")
tokyo.neighbors<-graph.neighborhood(cities.city1,1, 12)[[1]]
plot(tokyo.neighbors,vertex.label=V(tokyo.neighbors)$id,main="Tokyo")
par(mfrow=c(1,1))
