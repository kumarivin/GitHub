x<-1:20
x
x<-list(1,'a',TRUE,1+4i)
print(x)
dim(x1)<-c(2,5)
x1<-1:20
dim(x1)<-c(2,5)
dim(x1)<-c(4,5)
print(x1)
x<-factor(c('yes','no,'yes','yes','no'))
x<- factor(c('yes','no,'yes','yes','no'))
x<-factor(c('yes','no','yes','yes','no'))
x
table(x)
unclass(x)
x<-factor(c('yes','no','yes','yes','no'),levels=c('yes','no'))
x
x<-data.frame(foo=1:4,bar=c(T,T,F,F))
x
x=10
x
as.logical(x)
q()
x<-c('a','b','c','c','d','a')
x
u<-x>'a'
u
x(u)
x[u]
x=list(foo=1:4,bar=0.6,baz="hello")
x[c(1,3)]
x<-list(aardvark=1:5)
x
x$a
x<-list(aardvark=1:5,ardnak=6:10)
x$a
x[['a',exact=false]]
x[['a',exact=FALSE]]
x<-list(aardvark=1:5)
x[['a',exact=FALSE]]
x<-(1,2,NA,3,NA,5,NA)
x<-c(1,2,NA,3,NA,5,NA)
bad<-is.na(x)
bad
x[!bad]
y<-('a','b',NA,'c',NA,'d',NA)
y<-c('a','b',NA,'c',NA,'d',NA)
good<-complete.cases(x,y)
good
y<-c('a','b',NA,'c',NA,'d','f')
good<-complete.cases(x,y)
good
x[good]
y[good]
airquality[1:6,]
airquality[good]
good<-complete.cases(airquality)
airquality[good]
airquality[good,]
airquality[good,][1:6,]
x<-1:3;y<-6:9
x+y
y+x
x<-1:3;y<-6:8
y+x
x<-matrix(1:4,2,2);y<-matrix(10:13,2,2)
x*y
q()
install.packages("sand")
install.packages("knitr")
install.packages("ergm")
library(datasets)
head(airquality)
str(airqualit)
str(airquality)
s<-split(airquality,airquality$month)
s<-split(airquality,airquality$Month)
str(s)
x<c('a','b','c','d')
x<-c('a','b','c','d')
for (i in 1:4){}
for (i in 1:4){print(x[i])}
for (i in seq_along(x)){print(x[i])}
seq_along(x)
for letter in x {print letter}
for letter in x {print (letter)}
for (letter in x) {print (letter)}
print(i+1)
print(x[i+1])
print(x[i-1])
for (i in 1:4)  print(x[i])
print(x[i-1])
z<-Z-1
}
print(z)
coin<-rbinom(1,1,0.5)
if (coin==1){
} else
} else{
z<-Z-1
z<-5
while(z>=3 && z<=10){
print(z)
coin<-rbinom(1,1,0.5)
if (coin==1){
z<-Z+1
} else{
z<-Z-1
}
}
z<-5
while(z>=3 && z<=10){
print(z)
coin<-rbinom(1,1,0.5)
if (coin==1){
z<-Z+1
} else{
z<-Z-1
}
}
z <- 5 while(z>=3 && z<=10){
print(z)
coin<-rbinom(1,1,0.5)
if (coin==1){
z<-Z+1
} else{
z<-Z-1
}
}
z <- 5
while(z>=3 && z<=10){
print(z)
coin<-rbinom(1,1,0.5)
if (coin==1){
z<-Z+1
} else{
z<-Z-1
}
}
z <- 5
while(z>=3 && z<=10){
print(z)
coin<-rbinom(1,1,0.5)
if (coin==1){
z<-Z+1
} else{
z<-Z-1
}
}
z <- 5
while(z>=3 && z<=10){
print(z)
coin<-rbinom(1,1,0.5)
if (coin==1){
z<-Z+1
} else{
z<-Z-1
}
}
z <- 5
while(z>=3 && z<=10){
print(z)
coin<-rbinom(1,1,0.5)
if (coin==1){
z<-z+1
} else{
z<-z-1
}
}
# Load libraries
library(sand)
# Set the working directory. Adapt this for your local situation
setwd("C:/Users/TG/Documents/495/lab3/lab3")
# Get the M182 networks
m182.friend <- read.graph("m182-friend.graphml", format="graphml")
m182.task <- read.graph("m182-task.graphml", format="graphml")
m182.social <- read.graph("m182-social.graphml", format="graphml")
# Create weak and strong undirected versions of friend
m182.sfriend<-as.undirected(m182.friend,mode='mutual')
m182.wfriend<-as.undirected(m182.friend,mode='collapse')
m182.layout<-layout.kamada.kawai(m182.sfriend)
m182.layout<-layout.kamada.kawai(m182.wfriend)
plot(m182.sfriend,layout=m182.layout,main="strong")
plot(m182.wfriend,layout=m182.layout,main="Weak")
plot(m182.social,layout=m182.layout,main="social")
plot(m182.task,layout=m182.layout,main="Task")
par(mfrow=c(2,2))
plot(m182.sfriend,layout=m182.layout,main="strong")
plot(m182.wfriend,layout=m182.layout,main="Weak")
plot(m182.social,edge.arrow.size=0.1,layout=m182.layout,main="social")
plot(m182.task,edge.arrow.size=0.1,layout=m182.layout,main="Task")
par(mfrow=c(1,1))
m182.walk<-walktrap.community(m182.wfriend)
m182.walk
sizes(m182.walk)
membership(m182.walk)
m182.walk.clust<-as.hclust(m182.walk)
plot(m182.walk.clust)
plot(m182.wfriend,layout=m182.layout,vertex.color=membership(m182.walk))
m182.walk<-edge.betweeness.community(m182.wfriend)
m182.walk<-edge.betweenness.community(m182.wfriend)
m182.betw<-edge.betweenness.community(m182.wfriend)
m182.betw
sizes(m182.betw)
membership(m182.betw)
m182.betw<-edge.betweenness.community(m182.wfriend)
m182.betw
sizes(m182.betw)
membership(m182.betw)
m182.betw.clust<-as.hclust(m182.betw)
plot(m182.betw.clust)
plot(m182.wfriend,layout=m182.layout,vertex.color=membership(m182.betw))
m182.eign<-leading.eigenvector.community(m182.wfriend)
m182.eign
sizes(m182.eign)
membership(m182.eign)
plot(m182.wfriend,layout=m182.layout,vertex.color=membership(m182.eign))
m182.opt<-optimal.community(m182.wfriend)
m182.opt
sizes(m182.opt)
membership(m182.opt)
plot(m182.wfriend,layout=m182.layout,vertex.color=membership(m182.opt))
assortativity.nominal(m182.social,types=memberships(m182.opt))
assortativity.nominal(m182.social,types=membership(m182.opt))
assortativity.nominal(m182.social,types=membership(m182.betw))
assortativity.nominal(m182.task,types=membership(m182.opt))
assortativity.nominal(m182.task,types=membership(m182.betw))
m182.social.nodes<-length(v(m182.social))
m182.social.edges<-length(E(m182.social))
m182.social.nodes<-length(V(m182.social))
m182.social.rand<-erdos.renyi.game(m182.social.nodes,m182.social.edges,type='gnm')
m182.social.rand<-erdos.renyi.game(m182.social.nodes,m182.social.edges,type='gnm',directed=TRUE)
plot(m182.social.rand)
assortativity.nominal(m182.social.rand,types=membership(m182.opt))
assortativity.nominal(m182.social.rand,types=membership(m182.betw))
m182.task.nodes<-length(V(m182.task))
m182.task.edges<-length(E(m182.task))
m182.social.rand<-erdos.renyi.game(m182.task.nodes,m182.task.edges,type='gnm',directed=TRUE)
m182.task.rand<-erdos.renyi.game(m182.task.nodes,m182.task.edges,type='gnm',directed=TRUE)
assortativity.nominal(m182.task.rand,types=membership(m182.opt))
assortativity.nominal(m182.task.rand,types=membership(m182.betw))
social.opt<-assortativity.nominal(m182.social,types=membership(m182.opt))
social.btw<-assortativity.nominal(m182.social,types=membership(m182.betw))
task.opt<-assortativity.nominal(m182.task,types=membership(m182.opt))
task.btw<-assortativity.nominal(m182.task,types=membership(m182.betw))
m182.social.nodes<-length(V(m182.social))
m182.social.edges<-length(E(m182.social))
m182.social.rand<-erdos.renyi.game(m182.social.nodes,m182.social.edges,type='gnm',directed=TRUE)
plot(m182.social.rand)
socialr.opt<-assortativity.nominal(m182.social.rand,types=membership(m182.opt))
socialr.btw<-assortativity.nominal(m182.social.rand,types=membership(m182.betw))
m182.task.nodes<-length(V(m182.task))
m182.task.edges<-length(E(m182.task))
m182.task.rand<-erdos.renyi.game(m182.task.nodes,m182.task.edges,type='gnm',directed=TRUE)
taskr.opt<-assortativity.nominal(m182.task.rand,types=membership(m182.opt))
taskr.btw<-assortativity.nominal(m182.task.rand,types=membership(m182.betw))
df<-data.frame(social=c(social.opt,social.opt),socialR=c(socialr.opt,socialr.opt),task=c(task.opt,task.btw),taskr=c(taskr.opt,taskr.btw))
df
