x<-1:20
x
x<-list(1,'a',TRUE,1+4i)
print(x)
dim(x1)<-c(2,5)
x1<-1:20
dim(x1)<-c(2,5)
dim(x1)<-c(4,5)
print(x1)
x<-factor(c('yes','no,'yes','yes','no'))
x<- factor(c('yes','no,'yes','yes','no'))
x<-factor(c('yes','no','yes','yes','no'))
x
table(x)
unclass(x)
x<-factor(c('yes','no','yes','yes','no'),levels=c('yes','no'))
x
x<-data.frame(foo=1:4,bar=c(T,T,F,F))
x
x=10
x
as.logical(x)
q()
x<-c('a','b','c','c','d','a')
x
u<-x>'a'
u
x(u)
x[u]
x=list(foo=1:4,bar=0.6,baz="hello")
x[c(1,3)]
x<-list(aardvark=1:5)
x
x$a
x<-list(aardvark=1:5,ardnak=6:10)
x$a
x[['a',exact=false]]
x[['a',exact=FALSE]]
x<-list(aardvark=1:5)
x[['a',exact=FALSE]]
x<-(1,2,NA,3,NA,5,NA)
x<-c(1,2,NA,3,NA,5,NA)
bad<-is.na(x)
bad
x[!bad]
y<-('a','b',NA,'c',NA,'d',NA)
y<-c('a','b',NA,'c',NA,'d',NA)
good<-complete.cases(x,y)
good
y<-c('a','b',NA,'c',NA,'d','f')
good<-complete.cases(x,y)
good
x[good]
y[good]
airquality[1:6,]
airquality[good]
good<-complete.cases(airquality)
airquality[good]
airquality[good,]
airquality[good,][1:6,]
x<-1:3;y<-6:9
x+y
y+x
x<-1:3;y<-6:8
y+x
x<-matrix(1:4,2,2);y<-matrix(10:13,2,2)
x*y
q()
install.packages("sand")
install.packages("knitr")
install.packages("ergm")
library(datasets)
head(airquality)
str(airqualit)
str(airquality)
s<-split(airquality,airquality$month)
s<-split(airquality,airquality$Month)
str(s)
x<c('a','b','c','d')
x<-c('a','b','c','d')
for (i in 1:4){}
for (i in 1:4){print(x[i])}
for (i in seq_along(x)){print(x[i])}
seq_along(x)
for letter in x {print letter}
for letter in x {print (letter)}
for (letter in x) {print (letter)}
print(i+1)
print(x[i+1])
print(x[i-1])
for (i in 1:4)  print(x[i])
print(x[i-1])
z<-Z-1
}
print(z)
coin<-rbinom(1,1,0.5)
if (coin==1){
} else
} else{
z<-Z-1
z<-5
while(z>=3 && z<=10){
print(z)
coin<-rbinom(1,1,0.5)
if (coin==1){
z<-Z+1
} else{
z<-Z-1
}
}
z<-5
while(z>=3 && z<=10){
print(z)
coin<-rbinom(1,1,0.5)
if (coin==1){
z<-Z+1
} else{
z<-Z-1
}
}
z <- 5 while(z>=3 && z<=10){
print(z)
coin<-rbinom(1,1,0.5)
if (coin==1){
z<-Z+1
} else{
z<-Z-1
}
}
z <- 5
while(z>=3 && z<=10){
print(z)
coin<-rbinom(1,1,0.5)
if (coin==1){
z<-Z+1
} else{
z<-Z-1
}
}
z <- 5
while(z>=3 && z<=10){
print(z)
coin<-rbinom(1,1,0.5)
if (coin==1){
z<-Z+1
} else{
z<-Z-1
}
}
z <- 5
while(z>=3 && z<=10){
print(z)
coin<-rbinom(1,1,0.5)
if (coin==1){
z<-Z+1
} else{
z<-Z-1
}
}
z <- 5
while(z>=3 && z<=10){
print(z)
coin<-rbinom(1,1,0.5)
if (coin==1){
z<-z+1
} else{
z<-z-1
}
}
df<-data.frame(social=c(social.opt,social.btw),socialR=c(socialr.opt,socialr.btw),task=c(task.opt,task.btw),taskr=c(taskr.opt,taskr.btw))
socialr.opt<-assortativity.nominal(m182.social.rand,types=membership(m182.opt))
N<-100
x<-rnorm(N)+1;y<-rnorm(N)+1;dat<-data.frame(x,y)
x<-rnorm(N)+5;y<-rnorm(N)+1;dat<-data.frame(dat,data.frame(x,y))
x<-rnorm(N)+1;y<-rnorm(N)+5;dat<-data.frame(dat,data.frame(x,y))
dat
ob<-kmeans(x, 3, iter.max = 10, nstart = 1,algorithm="Hartigan-Wong", trace=FALSE)
fitted(ob, method = "centers" )
ob
setwd("C:/Users/TG/Documents/495/hwk4/hwk4")
# 2 Load utilities
source("mycugtest.R")
source("myqaptest.R")
# 3 Load sand library
library(sand)
DolphinGraph<-read.graph("dolphin.graphml",format="graphml")
transitivity(DolphinGraph,type="global")
cugtest1 <- mycugtest(gr,transitivity,cmode="edges", directed=TRUE, type="global")
print.cug.test
plot.cug.test
cugtest1 <- mycugtest(DolphinGraph,transitivity,cmode="edges", directed=TRUE, type="global")
print.cug.test(cugtest1)
plot.cug.test(cugtest1)
print.cug.test
print.cug.test(cugtest1)
centralization.degree(DolphinGraph,mode="all")
centralization.degree(DolphinGraph)
cugcentraltest1 <- mycugtest(DolphinGraph,centralization.degree,cmode="edges", directed=TRUE, type="global")
centralization.degree(DolphinGraph)$centralization
install.packages("Rfacebook")
install.packages("RCurl")
token<-"CAACEdEose0cBANIryyOULfiTpCudyRyZBdOzjZCLEQBPyVLRzeBj76tGa1MbUNVC0iMQNDPzi8sX9o7oisZCXHgzKvjiaZCU79zxJoZCLeldOA7XVZBXCU4yeA79FC7qdJ20PvciQIwVIZAtVRrwAIkxNMltyisKJxOtQtMGk5CjtXQBsrZAOAfaTrV0Hey36ZCrKUN932xuneoDHkJVekNxQ"
friends<-getFriends(token, simplify = FALSE)
library(rfacebook)
library(Rfacebook)
token<-"CAACEdEose0cBANIryyOULfiTpCudyRyZBdOzjZCLEQBPyVLRzeBj76tGa1MbUNVC0iMQNDPzi8sX9o7oisZCXHgzKvjiaZCU79zxJoZCLeldOA7XVZBXCU4yeA79FC7qdJ20PvciQIwVIZAtVRrwAIkxNMltyisKJxOtQtMGk5CjtXQBsrZAOAfaTrV0Hey36ZCrKUN932xuneoDHkJVekNxQ"
friends<-getFriends(token, simplify = FALSE)
friends<-getFriends(token)
friends
newsfee<-getNewsFeed(token,n=20)
newsfee<-getNewsfeed(token,n=20)
token<-"CAACEdEose0cBAFIuFsGaNYMBQP23uQcfx22dL2kDu96PMgZAvmfWjVE3HL214ZAQiVqACcsfBag9LyS8yZCnfTwMrtsrPZB3OFAxVZAFl4Y0F6kr60D4oqnpZApXcQdrL4yCCqEO07E3KZAcGloueFZCkIsfQSt3dZC4QZC5ZAqtwH6bZCXFHqeIjqnUYkJL9tBi3ggnZCQGliBLRtirZAnFYbiqS7"
newsfee<-getNewsfeed(token,n=20)
newsfee
cugcentraltest1 <- mycugtest(DolphinGraph,centralization.degree,cmode="edges", directed=TRUE, type="global")
cugcentraltest1 <- DegreeCent(DolphinGraph)
centralization.degree(gr)$centralization
}
DegreeCent<-function(gr){
return centralization.degree(gr)$centralization
return centralization.degree(gr)$centralization}
DegreeCent<-function(gr){
r<- centralization.degree(gr)$centralization
return r
r<- centralization.degree(gr)
rx<- centralization.degree(gr)
rx<- centralization.degree(grph)
DegreeCent<-function(grph){
rx<- centralization.degree(grph)
return rx
DegreeCent<-function(grph){ rx<- centralization.degree(grph);return rx}
DegreeCent<-function(grph,fun){
rx <- fun(grph);
return rx
rx <- fun(grph)$centralization;
return (rx)
rx <- fun(grph)$centralization;
rx <- centralization.degree(grph)$centralization;
DegreeCent<-function(grph,fun){
rx <- centralization.degree(grph)$centralization;
return (rx)
}
cugcentraltest1 <- DegreeCent(DolphinGraph)
cugcentraltest1
dolphincentralization <- DegreeCent(DolphinGraph)
cugtest1 <- mycugtest(DolphinGraph,dolphincentralization,cmode="edges", directed=TRUE)
cugtest1 <- mycugtest(DolphinGraph,transitivity,cmode="edges", directed=TRUE, type="global")
cugcenttest1 <- mycugtest(DolphinGraph,dolphincentralization,cmode="edges", directed=TRUE)
cugcenttest1 <- mycugtest(DolphinGraph,DegreeCent,cmode="edges", directed=TRUE)
cugcenttest1
print.cug.test(cugcenttest1)
plot.cug.test(cugcenttest1)
DegreeCent<-function(grph){
rx <- centralization.degree(grph)$centralization;
return (rx)
}
cugcenttest1 <- mycugtest(DolphinGraph,DegreeCent,cmode="edges", directed=FALSE)
print.cug.test(cugcenttest1)
plot.cug.test(cugcenttest1)
dolphinassort<-function(grph){
assort<-assortativity(grph,types+1,directed=FALSE)
}
cugassorttest1 <- mycugtest(DolphinGraph,dolphinassort,cmode="edges", directed=FALSE)
dolphinassort<-function(grph){
assort<-assortativity.nominal(grph,types+1,directed=FALSE)
}
dolphinassort<-function(grph){
assort<-assortativity.nominal(grph,types+1,directed=FALSE);
return (assort)
}
assortativity.nominal(DolphinGraph,types+1,directed=FALSE)
assortativity.nominal(DolphinGraph,types,directed=FALSE)
V(DolphinGraph)
V(DolphinGraph)$sex
V(DolphinGraph)$Sex
assortativity.nominal(DolphinGraph,types=V(DolphinGraph)$Sex,directed=FALSE)
assortativity.nominal(DolphinGraph,types=V(DolphinGraph)$Sex,directed=FALSE)
vect<-V(DolphinGraph)$Sex
assortativity.nominal(DolphinGraph,types=vect,directed=FALSE)
assortativity.nominal(DolphinGraph,types=V(vect),directed=FALSE)
vect
vect<-V(DolphinGraph)$Sex+1
vect
assortativity.nominal(DolphinGraph,types=V(vect),directed=FALSE)
assortativity.nominal(DolphinGraph,types=vect,directed=FALSE)
dolphinassort<-function(grph,type){
vect<-V(grph)$type+1;
assort<-assortativity.nominal(grph,types=vect,directed=FALSE);
return (assort)
}
dolphinassort<-function(grph){
vect<-V(grph)$Sex+1;
assort<-assortativity.nominal(grph,types=vect,directed=FALSE);
return (assort)
}
cugassorttest1 <- mycugtest(DolphinGraph,dolphinassort,cmode="edges", directed=FALSE)
dolphinassort<-function(grph){
vect<-V(grph)$Sex+1;
assort<-assortativity.nominal(grph,types=vect,directed=FALSE);
return (assort)
}
dolphinassort(DolphinGraph)
cugassorttest1 <- mycugtest(DolphinGraph,dolphinassort,cmode="edges", directed=FALSE)
vect<-V(DolphinGraph)$Sex+1
vect<-function(){
return V(grph)$Sex+1
}
vect<-function(){
return (V(grph)$Sex+1)
}
dolphinassort<-function(grph,vect){
#vect<-V(grph)$Sex+1;
assort<-assortativity.nominal(grph,types=vect,directed=FALSE);
return (assort)
}
dolphinassort(DolphinGraph)
dolphinassort(DolphinGraph,vect)
vect<-V(DolphinGraph)$Sex+1
dolphinassort(DolphinGraph,vect)
cugassorttest1 <- mycugtest(DolphinGraph,dolphinassort,cmode="edges", directed=FALSE,types=vect)
dolphinassort<-function(grph,vect){
#vect<-V(grph)$Sex+1;
assort<-assortativity.nominal(grph,types=vect,directed=FALSE);
return (assort)
}
dolphinassort(DolphinGraph,vect)
cugassorttest1 <- mycugtest(DolphinGraph,dolphinassort,cmode="edges", directed=FALSE,types=vect)
cugassorttest1 <- mycugtest(DolphinGraph,dolphinassort,cmode="edges", directed=FALSE,vect)
dolphinassort<-function(grph){
#vect<-V(grph)$Sex+1;
assort<-assortativity.nominal(grph,types=vect,directed=FALSE);
return (assort)
}
dolphinassort(DolphinGraph,vect)
dolphinassort(DolphinGraph)
cugassorttest1 <- mycugtest(DolphinGraph,dolphinassort,cmode="edges", directed=FALSE,vect)
cugassorttest1 <- mycugtest(DolphinGraph,dolphinassort,cmode="edges", directed=FALSE,vect)
cugassorttest1
vect<-V(DolphinGraph)$Sex+1
dolphinassort<-function(grph,vect){
#vect<-V(grph)$Sex+1;
assort<-assortativity.nominal(grph,types=vect,directed=FALSE);
return (assort)
}
dolphinassort(DolphinGraph,vect)
cugassorttest1 <- mycugtest(DolphinGraph,dolphinassort(vect),cmode="edges", directed=FALSE)
cugassorttest1 <- mycugtest(DolphinGraph,dolphinassort(gr,vect),cmode="edges", directed=FALSE)
cugassorttest1 <- mycugtest(DolphinGraph,dolphinassort,cmode="edges", directed=FALSE)
dolphinassort<-function(grph){
vect<-V(grph)$Sex;
assort<-assortativity.nominal(grph,types=vect+1,directed=FALSE);
return (assort)
}
dolphinassort(DolphinGraph)
cugassorttest1 <- mycugtest(DolphinGraph,dolphinassort,cmode="edges", directed=FALSE)
dolphinassort<-function(grph){
#vect<-V(grph)$Sex;
assort<-assortativity.nominal(grph,types=(V(grph)$Sex)+1,directed=FALSE);
return (assort)
}
dolphinassort(DolphinGraph)
cugassorttest1 <- mycugtest(DolphinGraph,dolphinassort,cmode="edges", directed=FALSE)
vect<-V(DolphinGraph)$Sex+1
cl <- sample(rep(c(1,2,3,4), 25))
cl
cl <- sample(rep(c(1,2,3), 62))
cl
cl <- sample(rep(c(1,2,3), 21))
cl
cugassorttest1 <- mycugtest(DolphinGraph,assortativity.nominal,cmode="edges",types=cl, directed=FALSE)
cugassorttest1 <- mycugtest(DolphinGraph,assortativity.nominal,cmode="edges",directed=FALSE)
cugassorttest1 <- mycugtest(DolphinGraph,assortativity.nominal,types=vect,cmode="edges",directed=FALSE)
print.cug.test(cugassorttest1)
plot.cug.test(cugassorttest1)
cugassorttest1 <- mycugtest(DolphinGraph,assortativity.nominal,types=vect,cmode="edges",directed=FALSE)
print.cug.test(cugassorttest1)
plot.cug.test(cugassorttest1)
#QAP test
qapdegcenttest1 <- myqaptest(DolphinGraph,DegreeCent,reps=1000, directed=FALSE)
qapdegcenttest1 <- myqaptest(DolphinGraph,DegreeCent,reps=1000)
summary.qaptest(qapdegcenttest1)
plot.qaptest(qapdegcenttest1)
qapassorttest1 <- myqaptest(DolphinGraph,assortativity.nominal,types=vect,reps=1000,directed=FALSE)
summary.qaptest(qapassorttest1)
plot.qaptest(qapassorttest1)
kadvice <- read.graph("krack-advice.graphml", format="graphml")
kfriend <- read.graph("krack-friend.graphml", format="graphml")
kfriend.weak<-as.undirected(kfriend,mode='collapse')
leading.eigenvector.community(kfriend.weak)
leading.eigenvector.community(kfriend.weak)$membership
kfriend.weak.eigen<-leading.eigenvector.community(kfriend.weak)
kfriend.weak.eigen$membership
plot(kfriend.weak,col=kfriend.weak.eigen$membership)
plot(kfriend.weak,vertex.color=kfriend.weak.eigen$membership)
assortadvcwthfrnd<-mycugtest(kadvice,assortativity.nominal,types=kfriend.weak.eigen$membership,cmode="edges",directed=FALSE)
assortadvcwthfrnd
print.cug.test(assortadvcwthfrnd)
plot.cug.test(assortadvcwthfrnd)
advicetenure<-V(kadvice)$tenure
advicetenure
assortadvcwthfrnd<-mycugtest(kadvice,assortativity,types1=advicetenure,cmode="edges",directed=FALSE)
assortadvc<-mycugtest(kadvice,assortativity,types1=advicetenure,cmode="edges",directed=FALSE)
assortadvc<-mycugtest(kadvice,assortativity,types1=advicetenure,cmode="edges",directed=FALSE)
print.cug.test(assortadvc)
plot.cug.test(assortadvc)
qapassortadvcwthfrnd <- myqaptest(kadvice,assortativity.nominal,types=kfriend.weak.eigen$membership,reps=1000,directed=FALSE)
summary.qaptest(qapassortadvcwthfrnd)
plot.qaptest(qapassortadvcwthfrnd)
qapassortadvc<-myqaptest(kadvice,assortativity,types1=advicetenure,reps=1000,directed=FALSE)
summary.qaptest(qapassortadvc)
plot.qaptest(qapassortadvc)
com <- leading.eigenvector.community(dolphin)
token="CAACEdEose0cBAHDbNAZB5awxBTelZCUduSZB9PBOOYG2eXLxzWgaHe1kaQqGYI1Nt3Th5cmT8s3yuFEKilfBqFmfIy7J5o4JMZBWXWZAjYDyRVo7Ak3iudf24kmoELFInuSDL3ej2iEwiGbr1YtrusfODkWZAFKE9Vyt2jbaGaIWcpw7YUq9ISZBItZCmE7FqtSF6LXZBZCB3XGHk1bER4VG3e"
getFriends(token)
getLikes(token)
getNewsFeed(token)
getNewsfeed(token)
getLikes(token)
token="CAACEdEose0cBAHDbNAZB5awxBTelZCUduSZB9PBOOYG2eXLxzWgaHe1kaQqGYI1Nt3Th5cmT8s3yuFEKilfBqFmfIy7J5o4JMZBWXWZAjYDyRVo7Ak3iudf24kmoELFInuSDL3ej2iEwiGbr1YtrusfODkWZAFKE9Vyt2jbaGaIWcpw7YUq9ISZBItZCmE7FqtSF6LXZBZCB3XGHk1bER4VG3e"
getLikes(token)
getUsers(token)
token="CAACEdEose0cBAHDbNAZB5awxBTelZCUduSZB9PBOOYG2eXLxzWgaHe1kaQqGYI1Nt3Th5cmT8s3yuFEKilfBqFmfIy7J5o4JMZBWXWZAjYDyRVo7Ak3iudf24kmoELFInuSDL3ej2iEwiGbr1YtrusfODkWZAFKE9Vyt2jbaGaIWcpw7YUq9ISZBItZCmE7FqtSF6LXZBZCB3XGHk1bER4VG3e"
getUsers(token)
searchFacebook("sindhura",token,n=20)
# 1 File locations
setwd("C:/Users/TG/Documents/495/hwk4/hwk4")
# 2 Load utilities
source("mycugtest.R")
source("myqaptest.R")
# 3 Load sand library
library(sand)
# Part I: Dolphin Network
DolphinGraph<-read.graph("dolphin.graphml",format="graphml")
transitivity(DolphinGraph,type="global")
cugtest1 <- mycugtest(DolphinGraph,transitivity,cmode="edges", directed=TRUE, type="global")
print.cug.test(cugtest1)
plot.cug.test(cugtest1)
DegreeCent<-function(grph){
rx <- centralization.degree(grph)$centralization;
return (rx)
}
dolphincentralization <- DegreeCent(DolphinGraph)
cugcenttest1 <- mycugtest(DolphinGraph,DegreeCent,cmode="edges", directed=FALSE)
print.cug.test(cugcenttest1)
plot.cug.test(cugcenttest1)
vect<-V(DolphinGraph)$Sex+1
cugassorttest1 <- mycugtest(DolphinGraph,assortativity.nominal,types=vect,cmode="edges",directed=FALSE)
print.cug.test(cugassorttest1)
plot.cug.test(cugassorttest1)
#QAP test
qapdegcenttest1 <- myqaptest(DolphinGraph,DegreeCent,reps=1000)
summary.qaptest(qapdegcenttest1)
plot.qaptest(qapdegcenttest1)
qapassorttest1 <- myqaptest(DolphinGraph,assortativity.nominal,types=vect,reps=1000,directed=FALSE)
summary.qaptest(qapassorttest1)
plot.qaptest(qapassorttest1)
# Part II: Krackhardt Networks
kadvice <- read.graph("krack-advice.graphml", format="graphml")
kfriend <- read.graph("krack-friend.graphml", format="graphml")
kfriend.weak<-as.undirected(kfriend,mode='collapse')
kfriend.weak.eigen<-leading.eigenvector.community(kfriend.weak)
plot(kfriend.weak,vertex.color=kfriend.weak.eigen$membership)
#CUG Test
assortadvcwthfrnd<-mycugtest(kadvice,assortativity.nominal,types=kfriend.weak.eigen$membership,cmode="edges",directed=FALSE)
print.cug.test(assortadvcwthfrnd)
plot.cug.test(assortadvcwthfrnd)
advicetenure<-V(kadvice)$tenure
assortadvc<-mycugtest(kadvice,assortativity,types1=advicetenure,cmode="edges",directed=FALSE)
print.cug.test(assortadvc)
plot.cug.test(assortadvc)
#QAP Test
qapassortadvcwthfrnd <- myqaptest(kadvice,assortativity.nominal,types=kfriend.weak.eigen$membership,reps=1000,directed=FALSE)
summary.qaptest(qapassortadvcwthfrnd)
plot.qaptest(qapassortadvcwthfrnd)
qapassortadvc<-myqaptest(kadvice,assortativity,types1=advicetenure,reps=1000,directed=FALSE)
summary.qaptest(qapassortadvc)
plot.qaptest(qapassortadvc)
vect
